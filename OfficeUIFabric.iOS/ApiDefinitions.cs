using System;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace FabricComponents
{

    [Static]
    partial interface Constants
    {
        // extern double OfficeUIFabricVersionNumber;
        [Field("OfficeUIFabricVersionNumber", "__Internal")]
        double OfficeUIFabricVersionNumber { get; }

        // extern const unsigned char [] OfficeUIFabricVersionString;
        [Field("OfficeUIFabricVersionString", "__Internal")]
        IntPtr OfficeUIFabricVersionString { get; }
    }

    // @protocol AccessibleViewDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric22AccessibleViewDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface AccessibleViewDelegate
    {
        // @optional -(NSString * _Nullable)accessibilityValueForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
        [Export("accessibilityValueForAccessibleView:")]
        [return: NullAllowed]
        string AccessibilityValueForAccessibleView(UIView accessibleView);

        // @optional -(BOOL)accessibilityActivateForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
        [Export("accessibilityActivateForAccessibleView:")]
        bool AccessibilityActivateForAccessibleView(UIView accessibleView);

        // @optional -(void)accessibilityIncrementForAccessibleView:(UIView * _Nonnull)accessibleView;
        [Export("accessibilityIncrementForAccessibleView:")]
        void AccessibilityIncrementForAccessibleView(UIView accessibleView);

        // @optional -(void)accessibilityDecrementForAccessibleView:(UIView * _Nonnull)accessibleView;
        [Export("accessibilityDecrementForAccessibleView:")]
        void AccessibilityDecrementForAccessibleView(UIView accessibleView);

        // @optional -(BOOL)accessibilityPerformMagicTapForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
        [Export("accessibilityPerformMagicTapForAccessibleView:")]
        bool AccessibilityPerformMagicTapForAccessibleView(UIView accessibleView);

        // @optional -(NSArray * _Nullable)accessibilityElementsForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
        [Export("accessibilityElementsForAccessibleView:")]
        [return: NullAllowed]
        NSObject[] AccessibilityElementsForAccessibleView(UIView accessibleView);
    }

    interface IAccessibleTableViewDelegate { }

    // Todo: Need to be changed
    // @protocol AccessibleTableViewDelegate <AccessibleViewDelegate>
    [Protocol(Name = "_TtP14OfficeUIFabric27AccessibleTableViewDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface AccessibleTableViewDelegate
    {
        // @optional -(NSString * _Nullable)accessibilityValueForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath forTableView:(UITableView * _Nonnull)forTableView __attribute__((warn_unused_result));
        [Export("accessibilityValueForRowAtIndexPath:forTableView:")]
        [return: NullAllowed]
        string ForTableView(NSIndexPath indexPath, UITableView forTableView);
    }

    // @interface MSActionsCell : UITableViewCell
    [BaseType(typeof(UITableViewCell), Name = "_TtC14OfficeUIFabric13MSActionsCell")]
    interface MSActionsCell
    {
        // @property (readonly, nonatomic, strong) UIButton * _Nonnull action1Button;
        [Export("action1Button", ArgumentSemantic.Strong)]
        UIButton Action1Button { get; }

        // @property (readonly, nonatomic, strong) UIButton * _Nonnull action2Button;
        [Export("action2Button", ArgumentSemantic.Strong)]
        UIButton Action2Button { get; }

        // -(void)setupWithAction1Title:(NSString * _Nonnull)action1Title action2Title:(NSString * _Nonnull)action2Title action1IsDestructive:(BOOL)action1IsDestructive action2IsDestructive:(BOOL)action2IsDestructive;
        [Export("setupWithAction1Title:action2Title:action1IsDestructive:action2IsDestructive:")]
        void SetupWithAction1Title(string action1Title, string action2Title, bool action1IsDestructive, bool action2IsDestructive);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(void)prepareForReuse __attribute__((objc_requires_super));
        [Export("prepareForReuse")]
        [RequiresSuper]
        void PrepareForReuse();

        // -(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
        [Export("setHighlighted:animated:")]
        void SetHighlighted(bool highlighted, bool animated);

        // -(void)setSelected:(BOOL)selected animated:(BOOL)animated;
        [Export("setSelected:animated:")]
        void SetSelected(bool selected, bool animated);
    }

    // @interface MSActivityIndicatorCell : UITableViewCell
    [BaseType(typeof(UITableViewCell), Name = "_TtC14OfficeUIFabric23MSActivityIndicatorCell")]
    interface MSActivityIndicatorCell
    {
        // -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
        [Export("initWithStyle:reuseIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor(UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(void)prepareForReuse __attribute__((objc_requires_super));
        [Export("prepareForReuse")]
        [RequiresSuper]
        void PrepareForReuse();

        // -(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
        [Export("setHighlighted:animated:")]
        void SetHighlighted(bool highlighted, bool animated);

        // -(void)setSelected:(BOOL)selected animated:(BOOL)animated;
        [Export("setSelected:animated:")]
        void SetSelected(bool selected, bool animated);
    }

    // @interface MSActivityIndicatorView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric23MSActivityIndicatorView")]
    interface MSActivityIndicatorView
    {
        // @property (readonly, nonatomic) BOOL isAnimating;
        [Export("isAnimating")]
        bool IsAnimating { get; }

        // -(instancetype _Nonnull)initWithSize:(enum MSActivityIndicatorViewSize)size;
        [Export("initWithSize:")]
        IntPtr Constructor(MSActivityIndicatorViewSize size);

        // -(instancetype _Nonnull)initWithSideSize:(CGFloat)sideSize strokeThickness:(CGFloat)strokeThickness __attribute__((objc_designated_initializer));
        [Export("initWithSideSize:strokeThickness:")]
        [DesignatedInitializer]
        IntPtr Constructor(nfloat sideSize, nfloat strokeThickness);

        // -(void)startAnimating;
        [Export("startAnimating")]
        void StartAnimating();

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // -(void)sizeToFit;
        [Export("sizeToFit")]
        void SizeToFit();
    }

    // @interface MSAvatarView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric12MSAvatarView")]
    interface MSAvatarView
    {
        // @property (nonatomic) enum MSAvatarSize avatarSize;
        [Export("avatarSize", ArgumentSemantic.Assign)]
        MSAvatarSize AvatarSize { get; set; }

        // @property (nonatomic, strong) UIColor * _Nonnull avatarBackgroundColor;
        [Export("avatarBackgroundColor", ArgumentSemantic.Strong)]
        UIColor AvatarBackgroundColor { get; set; }

        // @property (nonatomic) enum MSAvatarStyle style;
        [Export("style", ArgumentSemantic.Assign)]
        MSAvatarStyle Style { get; set; }

        // -(instancetype _Nonnull)initWithAvatarSize:(enum MSAvatarSize)avatarSize withBorder:(BOOL)hasBorder style:(enum MSAvatarStyle)style __attribute__((objc_designated_initializer));
        [Export("initWithAvatarSize:withBorder:style:")]
        [DesignatedInitializer]
        IntPtr Constructor(MSAvatarSize avatarSize, bool hasBorder, MSAvatarStyle style);

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(void)setupWithPrimaryText:(NSString * _Nullable)primaryText secondaryText:(NSString * _Nullable)secondaryText image:(UIImage * _Nullable)image;
        [Export("setupWithPrimaryText:secondaryText:image:")]
        void SetupWithPrimaryText([NullAllowed] string primaryText, [NullAllowed] string secondaryText, [NullAllowed] UIImage image);

        // -(void)setupWithImage:(UIImage * _Nonnull)image;
        [Export("setupWithImage:")]
        void SetupWithImage(UIImage image);

        // @property (nonatomic) BOOL isAccessibilityElement;
        [Export("isAccessibilityElement")]
        bool IsAccessibilityElement { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable accessibilityLabel;
        [NullAllowed, Export("accessibilityLabel")]
        string AccessibilityLabel { get; set; }

        // @property (nonatomic) UIAccessibilityTraits accessibilityTraits;
        [Export("accessibilityTraits")]
        ulong AccessibilityTraits { get; set; }
    }

    // @interface MSBadgeField : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric12MSBadgeField")]
    interface MSBadgeField
    {
        // @property (nonatomic) NSInteger numberOfLines;
        [Export("numberOfLines")]
        nint NumberOfLines { get; set; }

        // @property (nonatomic) BOOL isEditable;
        [Export("isEditable")]
        bool IsEditable { get; set; }

        // @property (nonatomic) BOOL isEnabled;
        [Export("isEnabled")]
        bool IsEnabled { get; set; }

        // @property (readonly, copy, nonatomic) NSArray<MSBadgeView *> * _Nonnull badges;
        [Export("badges", ArgumentSemantic.Copy)]
        MSBadgeView[] Badges { get; }

        // @property (readonly, copy, nonatomic) NSArray<MSBadgeViewDataSource *> * _Nonnull badgeDataSources;
        [Export("badgeDataSources", ArgumentSemantic.Copy)]
        MSBadgeViewDataSource[] BadgeDataSources { get; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        IMSBadgeFieldDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<MSBadgeFieldDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(void)badgeText;
        [Export("badgeText")]
        void BadgeText();

        // -(void)addBadgesWithDataSources:(NSArray<MSBadgeViewDataSource *> * _Nonnull)dataSources;
        [Export("addBadgesWithDataSources:")]
        void AddBadgesWithDataSources(MSBadgeViewDataSource[] dataSources);

        // -(void)addBadgeWithDataSource:(MSBadgeViewDataSource * _Nonnull)dataSource fromUserAction:(BOOL)fromUserAction updateConstrainedBadges:(BOOL)updateConstrainedBadges;
        [Export("addBadgeWithDataSource:fromUserAction:updateConstrainedBadges:")]
        void AddBadgeWithDataSource(MSBadgeViewDataSource dataSource, bool fromUserAction, bool updateConstrainedBadges);

        // -(void)deleteBadgesWithDataSource:(MSBadgeViewDataSource * _Nonnull)dataSource;
        [Export("deleteBadgesWithDataSource:")]
        void DeleteBadgesWithDataSource(MSBadgeViewDataSource dataSource);

        // -(void)selectBadge:(MSBadgeView * _Nonnull)badge;
        [Export("selectBadge:")]
        void SelectBadge(MSBadgeView badge);

        // @property (readonly, copy, nonatomic) NSString * _Nonnull textFieldContent;
        [Export("textFieldContent")]
        string TextFieldContent { get; }

        // -(void)resetTextFieldContent;
        [Export("resetTextFieldContent")]
        void ResetTextFieldContent();

        // -(BOOL)becomeFirstResponder;
        [Export("becomeFirstResponder")]
        bool BecomeFirstResponder { get; }

        // @property (readonly, nonatomic) BOOL isFirstResponder;
        [Export("isFirstResponder")]
        bool IsFirstResponder { get; }

        // -(BOOL)resignFirstResponder;
        [Export("resignFirstResponder")]
        bool ResignFirstResponder { get; }

        //Todo: This is also troubling
        // -(void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey,id> * _Nullable)change context:(void * _Nullable)context;
        //[Export("observeValueForKeyPath:ofObject:change:context:")]
        //unsafe void ObserveValueForKeyPath([NullAllowed] string keyPath, [NullAllowed] NSObject @object, [NullAllowed] NSDictionary<NSString, NSObject> change, [NullAllowed] void* context);

        // -(NSInteger)accessibilityElementCount __attribute__((warn_unused_result));
        [Export("accessibilityElementCount")]
        nint AccessibilityElementCount { get; }

        // -(id _Nullable)accessibilityElementAtIndex:(NSInteger)index __attribute__((warn_unused_result));
        [Export("accessibilityElementAtIndex:")]
        [return: NullAllowed]
        NSObject AccessibilityElementAtIndex(nint index);

        // -(NSInteger)indexOfAccessibilityElement:(id _Nonnull)element __attribute__((warn_unused_result));
        [Export("indexOfAccessibilityElement:")]
        nint IndexOfAccessibilityElement(NSObject element);

        // -(void)voiceOverFocusOnTextFieldAndAnnounce:(NSString * _Nullable)announcement;
        [Export("voiceOverFocusOnTextFieldAndAnnounce:")]
        void VoiceOverFocusOnTextFieldAndAnnounce([NullAllowed] string announcement);
    }

    interface IMSBadgeViewDelegate { }

    // @protocol MSBadgeViewDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric19MSBadgeViewDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSBadgeViewDelegate
    {
        // @required -(void)didSelectBadge:(MSBadgeView * _Nonnull)badge;
        [Abstract]
        [Export("didSelectBadge:")]
        void DidSelectBadge(MSBadgeView badge);

        // @required -(void)didTapSelectedBadge:(MSBadgeView * _Nonnull)badge;
        [Abstract]
        [Export("didTapSelectedBadge:")]
        void DidTapSelectedBadge(MSBadgeView badge);
    }

    interface IMSBadgeFieldDelegate { }


    // @protocol MSBadgeFieldDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric20MSBadgeFieldDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSBadgeFieldDelegate
    {
        // @required -(MSBadgeViewDataSource * _Nonnull)badgeField:(MSBadgeField * _Nonnull)badgeField badgeDataSourceForText:(NSString * _Nonnull)text __attribute__((warn_unused_result));
        [Abstract]
        [Export("badgeField:badgeDataSourceForText:")]
        MSBadgeViewDataSource BadgeField(MSBadgeField badgeField, string text);

        // @optional -(void)badgeField:(MSBadgeField * _Nonnull)badgeField willChangeTextFieldContentWithText:(NSString * _Nonnull)newText;
        [Export("badgeField:willChangeTextFieldContentWithText:")]
        void WillChangeTextFieldContentWithText(MSBadgeField badgeField, string newText);

        // @optional -(void)badgeFieldDidChangeTextFieldContent:(MSBadgeField * _Nonnull)badgeField isPaste:(BOOL)isPaste;
        [Export("badgeFieldDidChangeTextFieldContent:isPaste:")]
        void BadgeFieldDidChangeTextFieldContent(MSBadgeField badgeField, bool isPaste);

        // @optional -(BOOL)badgeField:(MSBadgeField * _Nonnull)badgeField shouldBadgeText:(NSString * _Nonnull)text forSoftBadgingString:(NSString * _Nonnull)badgingString __attribute__((warn_unused_result));
        [Export("badgeField:shouldBadgeText:forSoftBadgingString:")]
        bool BadgeField(MSBadgeField badgeField, string text, string badgingString);

        // @optional -(void)badgeField:(MSBadgeField * _Nonnull)badgeField didAddBadge:(MSBadgeView * _Nonnull)badge;
        [Export("badgeField:didAddBadge:")]
        void BadgeField(MSBadgeField badgeField, MSBadgeView badge);

        // @optional -(void)badgeField:(MSBadgeField * _Nonnull)badgeField didDeleteBadge:(MSBadgeView * _Nonnull)badge;
        [Export("badgeField:didDeleteBadge:")]
        void DidDeleteBadge(MSBadgeField badgeField, MSBadgeView badge);

        // @optional -(BOOL)badgeField:(MSBadgeField * _Nonnull)badgeField shouldAddBadgeForBadgeDataSource:(MSBadgeViewDataSource * _Nonnull)badgeDataSource __attribute__((warn_unused_result));
        [Export("badgeField:shouldAddBadgeForBadgeDataSource:")]
        bool BadgeField(MSBadgeField badgeField, MSBadgeViewDataSource badgeDataSource);

        // @optional -(MSBadgeView * _Nonnull)badgeField:(MSBadgeField * _Nonnull)badgeField newBadgeForBadgeDataSource:(MSBadgeViewDataSource * _Nonnull)badgeDataSource __attribute__((warn_unused_result));
        [Export("badgeField:newBadgeForBadgeDataSource:")]
        MSBadgeView NewBadgeForBadgeDataSource(MSBadgeField badgeField, MSBadgeViewDataSource badgeDataSource);

        // @optional -(MSBadgeView * _Nonnull)badgeField:(MSBadgeField * _Nonnull)badgeField newMoreBadgeForBadgeDataSources:(NSArray<MSBadgeViewDataSource *> * _Nonnull)badgeDataSources __attribute__((warn_unused_result));
        [Export("badgeField:newMoreBadgeForBadgeDataSources:")]
        MSBadgeView BadgeField(MSBadgeField badgeField, MSBadgeViewDataSource[] badgeDataSources);

        // @optional -(void)badgeFieldContentHeightDidChange:(MSBadgeField * _Nonnull)badgeField;
        [Export("badgeFieldContentHeightDidChange:")]
        void BadgeFieldContentHeightDidChange(MSBadgeField badgeField);

        // @optional -(void)badgeField:(MSBadgeField * _Nonnull)badgeField didTapSelectedBadge:(MSBadgeView * _Nonnull)badge;
        [Export("badgeField:didTapSelectedBadge:")]
        void DidTapSelectedBadge(MSBadgeField badgeField, MSBadgeView badge);

        // @optional -(BOOL)badgeField:(MSBadgeField * _Nonnull)badgeField shouldDragBadge:(MSBadgeView * _Nonnull)badge __attribute__((warn_unused_result));
        [Export("badgeField:shouldDragBadge:")]
        bool ShouldDragBadge(MSBadgeField badgeField, MSBadgeView badge);

        // @optional -(void)badgeField:(MSBadgeField * _Nonnull)originbadgeField didEndDraggingOriginBadge:(MSBadgeView * _Nonnull)originBadge toBadgeField:(MSBadgeField * _Nullable)destinationBadgeField withNewBadge:(MSBadgeView * _Nullable)newBadge;
        [Export("badgeField:didEndDraggingOriginBadge:toBadgeField:withNewBadge:")]
        void BadgeField(MSBadgeField originbadgeField, MSBadgeView originBadge, [NullAllowed] MSBadgeField destinationBadgeField, [NullAllowed] MSBadgeView newBadge);

        // @optional -(BOOL)badgeFieldShouldBeginEditing:(MSBadgeField * _Nonnull)badgeField __attribute__((warn_unused_result));
        [Export("badgeFieldShouldBeginEditing:")]
        bool BadgeFieldShouldBeginEditing(MSBadgeField badgeField);

        // @optional -(void)badgeFieldDidBeginEditing:(MSBadgeField * _Nonnull)badgeField;
        [Export("badgeFieldDidBeginEditing:")]
        void BadgeFieldDidBeginEditing(MSBadgeField badgeField);

        // @optional -(void)badgeFieldDidEndEditing:(MSBadgeField * _Nonnull)badgeField;
        [Export("badgeFieldDidEndEditing:")]
        void BadgeFieldDidEndEditing(MSBadgeField badgeField);

        // @optional -(BOOL)badgeFieldShouldReturn:(MSBadgeField * _Nonnull)badgeField __attribute__((warn_unused_result));
        [Export("badgeFieldShouldReturn:")]
        bool BadgeFieldShouldReturn(MSBadgeField badgeField);
    }

    // @interface MSBadgeView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric11MSBadgeView")]
    interface MSBadgeView
    {
        [Wrap("WeakDataSource")]
        [NullAllowed]
        MSBadgeViewDataSource DataSource { get; set; }

        // @property (nonatomic, strong) MSBadgeViewDataSource * _Nullable dataSource;
        [NullAllowed, Export("dataSource", ArgumentSemantic.Strong)]
        NSObject WeakDataSource { get; set; }

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // @property (copy, nonatomic) NSString * _Nullable accessibilityLabel;
        [NullAllowed, Export("accessibilityLabel")]
        string AccessibilityLabel { get; set; }
    }

    // @interface MSBadgeViewDataSource : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric21MSBadgeViewDataSource")]
    [DisableDefaultCtor]
    interface MSBadgeViewDataSource
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull text;
        [Export("text")]
        string Text { get; }

        // -(instancetype _Nonnull)initWithText:(NSString * _Nonnull)text style:(enum MSBadgeViewStyle)style __attribute__((objc_designated_initializer));
        [Export("initWithText:style:")]
        [DesignatedInitializer]
        IntPtr Constructor(string text, MSBadgeViewStyle style);

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSBadgeViewDataSource New();
    }

    // @interface MSBlurringView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric14MSBlurringView")]
    interface MSBlurringView
    {

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();
    }

    // @interface MSButton : UIButton
    [BaseType(typeof(UIButton), Name = "_TtC14OfficeUIFabric8MSButton")]
    interface MSButton
    {
        // @property (nonatomic) enum MSButtonStyle style;
        [Export("style", ArgumentSemantic.Assign)]
        MSButtonStyle Style { get; set; }

        // @property (getter = isHighlighted, nonatomic) BOOL highlighted;
        [Export("highlighted")]
        bool Highlighted { [Bind("isHighlighted")] get; set; }

        // @property (getter = isEnabled, nonatomic) BOOL enabled;
        [Export("enabled")]
        bool Enabled { [Bind("isEnabled")] get; set; }

        // -(instancetype _Nonnull)initWithStyle:(enum MSButtonStyle)style __attribute__((objc_designated_initializer));
        [Export("initWithStyle:")]
        [DesignatedInitializer]
        IntPtr Constructor(MSButtonStyle style);
    }

    // @interface MSCalendarConfiguration : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric23MSCalendarConfiguration")]
    [DisableDefaultCtor]
    interface MSCalendarConfiguration
    {
        // @property (readonly, getter = default, nonatomic, strong, class) MSCalendarConfiguration * _Nonnull default_;
        [Static]
        [Export("default_", ArgumentSemantic.Strong)]
        MSCalendarConfiguration Default_ { [Bind("default")] get; }

        // @property (nonatomic) NSInteger firstWeekday;
        [Export("firstWeekday")]
        nint FirstWeekday { get; set; }

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSCalendarConfiguration New();
    }

    // @interface MSCenteredLabelCell : UITableViewCell
    [BaseType(typeof(UITableViewCell), Name = "_TtC14OfficeUIFabric19MSCenteredLabelCell")]
    interface MSCenteredLabelCell
    {
        // -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
        [Export("initWithStyle:reuseIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor(UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
        [Export("setHighlighted:animated:")]
        void SetHighlighted(bool highlighted, bool animated);

        // -(void)setSelected:(BOOL)selected animated:(BOOL)animated;
        [Export("setSelected:animated:")]
        void SetSelected(bool selected, bool animated);
    }

    // @interface MSColors : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric8MSColors")]
    [DisableDefaultCtor]
    interface MSColors
    {
        // @property (nonatomic, strong, class) UIColor * _Nonnull primary;
        [Static]
        [Export("primary", ArgumentSemantic.Strong)]
        UIColor Primary { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull lightPrimary;
        [Static]
        [Export("lightPrimary", ArgumentSemantic.Strong)]
        UIColor LightPrimary { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull lightGray;
        [Static]
        [Export("lightGray", ArgumentSemantic.Strong)]
        UIColor LightGray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull gray;
        [Static]
        [Export("gray", ArgumentSemantic.Strong)]
        UIColor Gray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull darkGray;
        [Static]
        [Export("darkGray", ArgumentSemantic.Strong)]
        UIColor DarkGray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull backgroundLightGray;
        [Static]
        [Export("backgroundLightGray", ArgumentSemantic.Strong)]
        UIColor BackgroundLightGray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull backgroundGray;
        [Static]
        [Export("backgroundGray", ArgumentSemantic.Strong)]
        UIColor BackgroundGray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull borderLightGray;
        [Static]
        [Export("borderLightGray", ArgumentSemantic.Strong)]
        UIColor BorderLightGray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull borderGray;
        [Static]
        [Export("borderGray", ArgumentSemantic.Strong)]
        UIColor BorderGray { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull white;
        [Static]
        [Export("white", ArgumentSemantic.Strong)]
        UIColor White { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull black;
        [Static]
        [Export("black", ArgumentSemantic.Strong)]
        UIColor Black { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull error;
        [Static]
        [Export("error", ArgumentSemantic.Strong)]
        UIColor Error { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull lightError;
        [Static]
        [Export("lightError", ArgumentSemantic.Strong)]
        UIColor LightError { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull warning;
        [Static]
        [Export("warning", ArgumentSemantic.Strong)]
        UIColor Warning { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull lightWarning;
        [Static]
        [Export("lightWarning", ArgumentSemantic.Strong)]
        UIColor LightWarning { get; set; }

        // @property (copy, nonatomic, class) NSArray<UIColor *> * _Nonnull avatarBackgroundColors;
        [Static]
        [Export("avatarBackgroundColors", ArgumentSemantic.Copy)]
        UIColor[] AvatarBackgroundColors { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull background;
        [Static]
        [Export("background", ArgumentSemantic.Strong)]
        UIColor Background { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull buttonImage;
        [Static]
        [Export("buttonImage", ArgumentSemantic.Strong)]
        UIColor ButtonImage { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull disabled;
        [Static]
        [Export("disabled", ArgumentSemantic.Strong)]
        UIColor Disabled { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull foregroundRegular;
        [Static]
        [Export("foregroundRegular", ArgumentSemantic.Strong)]
        UIColor ForegroundRegular { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull foregroundSecondary;
        [Static]
        [Export("foregroundSecondary", ArgumentSemantic.Strong)]
        UIColor ForegroundSecondary { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull activityIndicator;
        [Static]
        [Export("activityIndicator", ArgumentSemantic.Strong)]
        UIColor ActivityIndicator { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull centeredLabelText;
        [Static]
        [Export("centeredLabelText", ArgumentSemantic.Strong)]
        UIColor CenteredLabelText { get; set; }

        // @property (nonatomic, strong, class) UIColor * _Nonnull separator;
        [Static]
        [Export("separator", ArgumentSemantic.Strong)]
        UIColor Separator { get; set; }

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSColors New();
    }

    // @interface MSDateTimePicker : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric16MSDateTimePicker")]
    interface MSDateTimePicker
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MSDateTimePickerDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<MSDateTimePickerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // -(void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate;
        [Export("presentFrom:with:startDate:endDate:")]
        void PresentFrom(UIViewController presentingController, MSDateTimePickerMode mode, NSDate startDate, [NullAllowed] NSDate endDate);

        // -(void)dismiss;
        [Export("dismiss")]
        void Dismiss();
    }

    interface IMSDateTimePickerDelegate { }

    // @protocol MSDateTimePickerDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric24MSDateTimePickerDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSDateTimePickerDelegate
    {
        // @required -(void)dateTimePicker:(MSDateTimePicker * _Nonnull)dateTimePicker didPickStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
        [Abstract]
        [Export("dateTimePicker:didPickStartDate:endDate:")]
        void DidPickStartDate(MSDateTimePicker dateTimePicker, NSDate startDate, NSDate endDate);
    }

    // @interface MSDimmingView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric13MSDimmingView")]
    interface MSDimmingView
    {
    }

    // @interface MSDotView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric9MSDotView")]
    interface MSDotView
    {
        // @property (nonatomic, strong) UIColor * _Nullable color;
        [NullAllowed, Export("color", ArgumentSemantic.Strong)]
        UIColor Color { get; set; }

        // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
        [Export("initWithFrame:")]
        [DesignatedInitializer]
        IntPtr Constructor(CGRect frame);

        // -(void)drawRect:(CGRect)rect;
        [Export("drawRect:")]
        void DrawRect(CGRect rect);
    }

    // @interface MSDrawerController : UIViewController
    [BaseType(typeof(UIViewController), Name = "_TtC14OfficeUIFabric18MSDrawerController")]
    interface MSDrawerController
    {
        // @property (nonatomic, strong) UIViewController * _Nullable contentController;
        [NullAllowed, Export("contentController", ArgumentSemantic.Strong)]
        UIViewController ContentController { get; set; }

        // @property (nonatomic, strong) UIView * _Nullable contentView;
        [NullAllowed, Export("contentView", ArgumentSemantic.Strong)]
        UIView ContentView { get; set; }

        // @property (nonatomic) enum MSDrawerResizingBehavior resizingBehavior;
        [Export("resizingBehavior", ArgumentSemantic.Assign)]
        MSDrawerResizingBehavior ResizingBehavior { get; set; }

        // @property (nonatomic) BOOL isExpanded;
        [Export("isExpanded")]
        bool IsExpanded { get; set; }

        // @property (nonatomic) UIPopoverArrowDirection permittedArrowDirections;
        [Export("permittedArrowDirections", ArgumentSemantic.Assign)]
        UIPopoverArrowDirection PermittedArrowDirections { get; set; }

        // @property (nonatomic) CGSize preferredContentSize;
        [Export("preferredContentSize", ArgumentSemantic.Assign)]
        CGSize PreferredContentSize { get; set; }

        // @property (copy, nonatomic) void (^ _Nullable)(void) onDismiss;
        [NullAllowed, Export("onDismiss", ArgumentSemantic.Copy)]
        Action OnDismiss { get; set; }

        // @property (copy, nonatomic) void (^ _Nullable)(void) onDismissCompleted;
        [NullAllowed, Export("onDismissCompleted", ArgumentSemantic.Copy)]
        Action OnDismissCompleted { get; set; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        IMSDrawerControllerDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<MSDrawerControllerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // -(instancetype _Nonnull)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection __attribute__((objc_designated_initializer));
        [Export("initWithSourceView:sourceRect:presentationOrigin:presentationDirection:")]
        [DesignatedInitializer]
        IntPtr Constructor(UIView sourceView, CGRect sourceRect, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);

        // -(instancetype _Nonnull)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection __attribute__((objc_designated_initializer));
        [Export("initWithBarButtonItem:presentationOrigin:presentationDirection:")]
        [DesignatedInitializer]
        IntPtr Constructor(UIBarButtonItem barButtonItem, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);

        // -(void)viewDidLoad;
        [Export("viewDidLoad")]
        void ViewDidLoad();

        // -(void)viewWillAppear:(BOOL)animated;
        [Export("viewWillAppear:")]
        void ViewWillAppear(bool animated);

        // -(void)viewWillDisappear:(BOOL)animated;
        [Export("viewWillDisappear:")]
        void ViewWillDisappear(bool animated);

        // -(void)viewDidDisappear:(BOOL)animated;
        [Export("viewDidDisappear:")]
        void ViewDidDisappear(bool animated);

        //Todo: something is not correct here
        // -(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
        //[Export("viewWillTransitionToSize:withTransitionCoordinator:")]
        //void ViewWillTransitionToSize(CGSize size, UIViewControllerTransitionCoordinator coordinator);

        // -(void)viewWillLayoutSubviews;
        [Export("viewWillLayoutSubviews")]
        void ViewWillLayoutSubviews();

        // -(BOOL)accessibilityPerformEscape __attribute__((warn_unused_result));
        [Export("accessibilityPerformEscape")]
        bool AccessibilityPerformEscape { get; }
    }

    interface IMSDrawerControllerDelegate { }

    // @protocol MSDrawerControllerDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric26MSDrawerControllerDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSDrawerControllerDelegate
    {
        // @optional -(void)drawerControllerDidChangeExpandedState:(MSDrawerController * _Nonnull)controller;
        [Export("drawerControllerDidChangeExpandedState:")]
        void DrawerControllerDidChangeExpandedState(MSDrawerController controller);

        // @optional -(void)drawerControllerWillDismiss:(MSDrawerController * _Nonnull)controller;
        [Export("drawerControllerWillDismiss:")]
        void DrawerControllerWillDismiss(MSDrawerController controller);

        // @optional -(void)drawerControllerDidDismiss:(MSDrawerController * _Nonnull)controller;
        [Export("drawerControllerDidDismiss:")]
        void DrawerControllerDidDismiss(MSDrawerController controller);
    }

    // @interface MSEasyTapButton : UIButton
    [BaseType(typeof(UIButton), Name = "_TtC14OfficeUIFabric15MSEasyTapButton")]
    interface MSEasyTapButton
    {
        // -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event __attribute__((warn_unused_result));
        [Export("pointInside:withEvent:")]
        bool PointInside(CGPoint point, [NullAllowed] UIEvent @event);

        // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
        [Export("initWithFrame:")]
        [DesignatedInitializer]
        IntPtr Constructor(CGRect frame);
    }

    // @interface MSFonts : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric7MSFonts")]
    [DisableDefaultCtor]
    interface MSFonts
    {
        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull title1;
        [Static]
        [Export("title1", ArgumentSemantic.Strong)]
        UIFont Title1 { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull title2;
        [Static]
        [Export("title2", ArgumentSemantic.Strong)]
        UIFont Title2 { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull headline;
        [Static]
        [Export("headline", ArgumentSemantic.Strong)]
        UIFont Headline { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull body;
        [Static]
        [Export("body", ArgumentSemantic.Strong)]
        UIFont Body { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull subhead;
        [Static]
        [Export("subhead", ArgumentSemantic.Strong)]
        UIFont Subhead { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull footnote;
        [Static]
        [Export("footnote", ArgumentSemantic.Strong)]
        UIFont Footnote { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull caption1;
        [Static]
        [Export("caption1", ArgumentSemantic.Strong)]
        UIFont Caption1 { get; }

        // @property (readonly, nonatomic, strong, class) UIFont * _Nonnull caption2;
        [Static]
        [Export("caption2", ArgumentSemantic.Strong)]
        UIFont Caption2 { get; }

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSFonts New();
    }

    // @interface MSHUD : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric5MSHUD")]
    [DisableDefaultCtor]
    interface MSHUD
    {
        // @property (readonly, nonatomic, strong, class) MSHUD * _Nonnull shared;
        [Static]
        [Export("shared", ArgumentSemantic.Strong)]
        MSHUD Shared { get; }

        [Wrap("WeakDelegate")]
        [NullAllowed]
        IMSHUDDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<MSHUDDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSHUD New();

        // -(void)showIn:(UIView * _Nonnull)view;
        [Export("showIn:")]
        void ShowIn(UIView view);

        // -(void)showIn:(UIView * _Nonnull)view with:(MSHUDParams * _Nonnull)params;
        [Export("showIn:with:")]
        void ShowIn(UIView view, MSHUDParams @params);

        // -(void)showFrom:(UIViewController * _Nonnull)controller;
        [Export("showFrom:")]
        void ShowFrom(UIViewController controller);

        // -(void)showFrom:(UIViewController * _Nonnull)controller with:(MSHUDParams * _Nonnull)params;
        [Export("showFrom:with:")]
        void ShowFrom(UIViewController controller, MSHUDParams @params);

        // -(void)showSuccessIn:(UIView * _Nonnull)view with:(NSString * _Nonnull)caption;
        [Export("showSuccessIn:with:")]
        void ShowSuccessIn(UIView view, string caption);

        // -(void)showSuccessFrom:(UIViewController * _Nonnull)controller with:(NSString * _Nonnull)caption;
        [Export("showSuccessFrom:with:")]
        void ShowSuccessFrom(UIViewController controller, string caption);

        // -(void)showFailureIn:(UIView * _Nonnull)view with:(NSString * _Nonnull)caption;
        [Export("showFailureIn:with:")]
        void ShowFailureIn(UIView view, string caption);

        // -(void)showFailureFrom:(UIViewController * _Nonnull)controller with:(NSString * _Nonnull)caption;
        [Export("showFailureFrom:with:")]
        void ShowFailureFrom(UIViewController controller, string caption);

        // -(void)hideAnimated:(BOOL)animated;
        [Export("hideAnimated:")]
        void HideAnimated(bool animated);
    }

    interface IMSHUDDelegate { }

    // @protocol MSHUDDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric13MSHUDDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSHUDDelegate
    {
        // @required -(UIWindow * _Nullable)defaultWindowForHUD:(MSHUD * _Nonnull)hud __attribute__((warn_unused_result));
        [Abstract]
        [Export("defaultWindowForHUD:")]
        [return: NullAllowed]
        UIWindow DefaultWindowForHUD(MSHUD hud);
    }

    // @interface MSHUDParams : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric11MSHUDParams")]
    interface MSHUDParams
    {
        // @property (copy, nonatomic) NSString * _Nonnull caption;
        [Export("caption")]
        string Caption { get; set; }

        // @property (nonatomic, strong) UIImage * _Nullable image;
        [NullAllowed, Export("image", ArgumentSemantic.Strong)]
        UIImage Image { get; set; }

        // @property (nonatomic) BOOL isBlocking;
        [Export("isBlocking")]
        bool IsBlocking { get; set; }

        // @property (nonatomic) BOOL isPersistent;
        [Export("isPersistent")]
        bool IsPersistent { get; set; }

        // -(instancetype _Nonnull)initWithCaption:(NSString * _Nonnull)caption image:(UIImage * _Nullable)image isPersistent:(BOOL)isPersistent isBlocking:(BOOL)isBlocking;
        [Export("initWithCaption:image:isPersistent:isBlocking:")]
        IntPtr Constructor(string caption, [NullAllowed] UIImage image, bool isPersistent, bool isBlocking);
    }

    // @interface MSLabel : UILabel
    [BaseType(typeof(UILabel), Name = "_TtC14OfficeUIFabric7MSLabel")]
    interface MSLabel
    {
        // @property (nonatomic) enum MSTextColorStyle colorStyle;
        [Export("colorStyle", ArgumentSemantic.Assign)]
        MSTextColorStyle ColorStyle { get; set; }

        // @property (nonatomic) enum MSTextStyle style;
        [Export("style", ArgumentSemantic.Assign)]
        MSTextStyle Style { get; set; }

        // -(instancetype _Nonnull)initWithStyle:(enum MSTextStyle)style colorStyle:(enum MSTextColorStyle)colorStyle __attribute__((objc_designated_initializer));
        [Export("initWithStyle:colorStyle:")]
        [DesignatedInitializer]
        IntPtr Constructor(MSTextStyle style, MSTextColorStyle colorStyle);
    }

    // @interface MSPageCardPresenterController : UIViewController
    [BaseType(typeof(UIViewController), Name = "_TtC14OfficeUIFabric29MSPageCardPresenterController")]
    interface MSPageCardPresenterController
    {
        // @property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
        [Export("modalPresentationStyle", ArgumentSemantic.Assign)]
        UIModalPresentationStyle ModalPresentationStyle { get; set; }

        [Wrap("WeakTransitioningDelegate")]
        [NullAllowed]
        UIViewControllerTransitioningDelegate TransitioningDelegate { get; set; }

        // @property (nonatomic, strong) id<UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate;
        [NullAllowed, Export("transitioningDelegate", ArgumentSemantic.Strong)]
        NSObject WeakTransitioningDelegate { get; set; }

        // -(void)viewDidLoad;
        [Export("viewDidLoad")]
        void ViewDidLoad();

        // -(void)viewWillAppear:(BOOL)animated;
        [Export("viewWillAppear:")]
        void ViewWillAppear(bool animated);

        // -(void)viewWillLayoutSubviews;
        [Export("viewWillLayoutSubviews")]
        void ViewWillLayoutSubviews();
    }

    interface IMSPersona { }

    // @protocol MSPersona
    /*
      Check whether adding [Model] to this declaration is appropriate.
      [Model] is used to generate a C# class that implements this protocol,
      and might be useful for protocols that consumers are supposed to implement,
      since consumers can subclass the generated class instead of implementing
      the generated interface. If consumers are not supposed to implement this
      protocol, then [Model] is redundant and will generate code that will never
      be used.
    */
    [Protocol(Name = "_TtP14OfficeUIFabric9MSPersona_")]
    [BaseType(typeof(NSObject)), Model]
    interface MSPersona
    {
        // @required @property (readonly, nonatomic, strong) UIImage * _Nullable avatarImage;
        [Abstract]
        [NullAllowed, Export("avatarImage", ArgumentSemantic.Strong)]
        UIImage AvatarImage { get; }

        // @required @property (readonly, copy, nonatomic) NSString * _Nonnull email;
        [Abstract]
        [Export("email")]
        string Email { get; }

        // @required @property (readonly, copy, nonatomic) NSString * _Nonnull name;
        [Abstract]
        [Export("name")]
        string Name { get; }

        // @required @property (readonly, copy, nonatomic) NSString * _Nonnull subtitle;
        [Abstract]
        [Export("subtitle")]
        string Subtitle { get; }
    }

    // @interface MSTableViewCell : UITableViewCell
    [BaseType(typeof(UITableViewCell), Name = "_TtC14OfficeUIFabric15MSTableViewCell")]
    interface MSTableViewCell
    {
        // @property (readonly, nonatomic, class) CGFloat smallHeight;
        [Static]
        [Export("smallHeight")]
        nfloat SmallHeight { get; }

        // @property (readonly, nonatomic, class) CGFloat mediumHeight;
        [Static]
        [Export("mediumHeight")]
        nfloat MediumHeight { get; }

        // @property (readonly, nonatomic, class) CGFloat largeHeight;
        [Static]
        [Export("largeHeight")]
        nfloat LargeHeight { get; }

        // @property (readonly, copy, nonatomic, class) NSString * _Nonnull identifier;
        [Static]
        [Export("identifier")]
        string Identifier { get; }

        // @property (readonly, nonatomic, class) CGFloat separatorLeftInsetForSmallCustomView;
        [Static]
        [Export("separatorLeftInsetForSmallCustomView")]
        nfloat SeparatorLeftInsetForSmallCustomView { get; }

        // @property (readonly, nonatomic, class) CGFloat separatorLeftInsetForMediumCustomView;
        [Static]
        [Export("separatorLeftInsetForMediumCustomView")]
        nfloat SeparatorLeftInsetForMediumCustomView { get; }

        // @property (readonly, nonatomic, class) CGFloat separatorLeftInsetForNoCustomView;
        [Static]
        [Export("separatorLeftInsetForNoCustomView")]
        nfloat SeparatorLeftInsetForNoCustomView { get; }

        // +(CGFloat)heightWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customViewSize:(enum CustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSTableViewCellAccessoryType)accessoryType titleNumberOfLines:(NSInteger)titleNumberOfLines subtitleNumberOfLines:(NSInteger)subtitleNumberOfLines footerNumberOfLines:(NSInteger)footerNumberOfLines containerWidth:(CGFloat)containerWidth __attribute__((warn_unused_result));
        [Static]
        [Export("heightWithTitle:subtitle:footer:customViewSize:customAccessoryView:accessoryType:titleNumberOfLines:subtitleNumberOfLines:footerNumberOfLines:containerWidth:")]
        nfloat HeightWithTitle(string title, string subtitle, string footer, CustomViewSize customViewSize, [NullAllowed] UIView customAccessoryView, MSTableViewCellAccessoryType accessoryType, nint titleNumberOfLines, nint subtitleNumberOfLines, nint footerNumberOfLines, nfloat containerWidth);

        // @property (nonatomic) NSInteger titleNumberOfLines;
        [Export("titleNumberOfLines")]
        nint TitleNumberOfLines { get; set; }

        // @property (nonatomic) NSInteger subtitleNumberOfLines;
        [Export("subtitleNumberOfLines")]
        nint SubtitleNumberOfLines { get; set; }

        // @property (nonatomic) NSInteger footerNumberOfLines;
        [Export("footerNumberOfLines")]
        nint FooterNumberOfLines { get; set; }

        // @property (nonatomic) NSLineBreakMode titleLineBreakMode;
        [Export("titleLineBreakMode", ArgumentSemantic.Assign)]
        UILineBreakMode TitleLineBreakMode { get; set; }

        // @property (nonatomic) NSLineBreakMode subtitleLineBreakMode;
        [Export("subtitleLineBreakMode", ArgumentSemantic.Assign)]
        UILineBreakMode SubtitleLineBreakMode { get; set; }

        // @property (nonatomic) NSLineBreakMode footerLineBreakMode;
        [Export("footerLineBreakMode", ArgumentSemantic.Assign)]
        UILineBreakMode FooterLineBreakMode { get; set; }

        // @property (readonly, nonatomic) enum CustomViewSize customViewSize;
        [Export("customViewSize")]
        CustomViewSize CustomViewSize { get; }

        // @property (copy, nonatomic) void (^ _Nullable)(void) onAccessoryTapped;
        [NullAllowed, Export("onAccessoryTapped", ArgumentSemantic.Copy)]
        Action OnAccessoryTapped { get; set; }

        // @property (copy, nonatomic) void (^ _Nullable)(void) onSelected;
        [NullAllowed, Export("onSelected", ArgumentSemantic.Copy)]
        Action OnSelected { get; set; }

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // @property (nonatomic) CGRect bounds;
        [Export("bounds", ArgumentSemantic.Assign)]
        CGRect Bounds { get; set; }

        // @property (nonatomic) CGRect frame;
        [Export("frame", ArgumentSemantic.Assign)]
        CGRect Frame { get; set; }

        // @property (nonatomic) UIEdgeInsets separatorInset;
        [Export("separatorInset", ArgumentSemantic.Assign)]
        UIEdgeInsets SeparatorInset { get; set; }

        // -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
        [Export("initWithStyle:reuseIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor(UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);

        // -(void)setupWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customView:(UIView * _Nullable)customView customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSTableViewCellAccessoryType)accessoryType;
        [Export("setupWithTitle:subtitle:footer:customView:customAccessoryView:accessoryType:")]
        void SetupWithTitle(string title, string subtitle, string footer, [NullAllowed] UIView customView, [NullAllowed] UIView customAccessoryView, MSTableViewCellAccessoryType accessoryType);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // -(void)safeAreaInsetsDidChange __attribute__((availability(ios, introduced=11)));
        [iOS(11, 0)]
        [Export("safeAreaInsetsDidChange")]
        void SafeAreaInsetsDidChange();

        // -(void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesBegan:withEvent:")]
        void TouchesBegan(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

        // -(void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesCancelled:withEvent:")]
        void TouchesCancelled(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

        // -(void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
        [Export("touchesEnded:withEvent:")]
        void TouchesEnded(NSSet<UITouch> touches, [NullAllowed] UIEvent @event);
    }

    // @interface MSPersonaCell : MSTableViewCell
    [BaseType(typeof(MSTableViewCell), Name = "_TtC14OfficeUIFabric13MSPersonaCell")]
    interface MSPersonaCell
    {
        // @property (readonly, nonatomic) enum CustomViewSize customViewSize;
        [Export("customViewSize")]
        CustomViewSize CustomViewSize { get; }

        // -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
        [Export("initWithStyle:reuseIdentifier:")]
        [DesignatedInitializer]
        IntPtr Constructor(UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);
    }

    // @interface MSPersonaData : NSObject <MSPersona>
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric13MSPersonaData")]
    [DisableDefaultCtor]
    interface MSPersonaData : MSPersona
    {
        // @property (nonatomic, strong) UIImage * _Nullable avatarImage;
        [NullAllowed, Export("avatarImage", ArgumentSemantic.Strong)]
        UIImage AvatarImage { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull email;
        [Export("email")]
        string Email { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull name;
        [Export("name")]
        string Name { get; set; }

        // @property (copy, nonatomic) NSString * _Nonnull subtitle;
        [Export("subtitle")]
        string Subtitle { get; set; }

        // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle avatarImage:(UIImage * _Nullable)avatarImage __attribute__((objc_designated_initializer));
        [Export("initWithName:email:subtitle:avatarImage:")]
        [DesignatedInitializer]
        IntPtr Constructor(string name, string email, string subtitle, [NullAllowed] UIImage avatarImage);

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSPersonaData New();
    }

    // @interface MSPersonaListView : UITableView
    [BaseType(typeof(UITableView), Name = "_TtC14OfficeUIFabric17MSPersonaListView")]
    interface MSPersonaListView
    {
        // @property (copy, nonatomic) NSArray<id<MSPersona>> * _Nonnull personaList;
        [Export("personaList", ArgumentSemantic.Copy)]
        IMSPersona[] PersonaList { get; set; }

        // @property (nonatomic) enum MSTableViewCellAccessoryType accessoryType;
        [Export("accessoryType", ArgumentSemantic.Assign)]
        MSTableViewCellAccessoryType AccessoryType { get; set; }

        // @property (nonatomic) BOOL showsSearchDirectoryButton;
        [Export("showsSearchDirectoryButton")]
        bool ShowsSearchDirectoryButton { get; set; }

        [Wrap("WeakSearchDirectoryDelegate")]
        [NullAllowed]
        IMSPersonaListViewSearchDirectoryDelegate SearchDirectoryDelegate { get; set; }

        // @property (nonatomic, weak) id<MSPersonaListViewSearchDirectoryDelegate> _Nullable searchDirectoryDelegate;
        [NullAllowed, Export("searchDirectoryDelegate", ArgumentSemantic.Weak)]
        NSObject WeakSearchDirectoryDelegate { get; set; }

        // @property (copy, nonatomic) void (^ _Nullable)(id<MSPersona> _Nonnull) onPersonaSelected;
        [NullAllowed, Export("onPersonaSelected", ArgumentSemantic.Copy)]
        Action<IMSPersona> OnPersonaSelected { get; set; }

        // -(void)pickPersona;
        [Export("pickPersona")]
        void PickPersona();

        // -(void)selectPersonaWithDirection:(enum MSPersonaListViewSelectionDirection)direction;
        [Export("selectPersonaWithDirection:")]
        void SelectPersonaWithDirection(MSPersonaListViewSelectionDirection direction);
    }

    interface IMSPersonaListViewSearchDirectoryDelegate { }

    // @protocol MSPersonaListViewSearchDirectoryDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric40MSPersonaListViewSearchDirectoryDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSPersonaListViewSearchDirectoryDelegate
    {
        // @required -(void)personaListSearchDirectory:(MSPersonaListView * _Nonnull)personaListView completion:(void (^ _Nonnull)(BOOL))completion;
        [Abstract]
        [Export("personaListSearchDirectory:completion:")]
        void Completion(MSPersonaListView personaListView, Action<bool> completion);
    }

    // @interface MSPopupMenuController : MSDrawerController
    [BaseType(typeof(MSDrawerController), Name = "_TtC14OfficeUIFabric21MSPopupMenuController")]
    interface MSPopupMenuController
    {
        // @property (nonatomic, strong) UIView * _Nullable contentView;
        [NullAllowed, Export("contentView", ArgumentSemantic.Strong)]
        UIView ContentView { get; set; }

        // @property (nonatomic) enum MSDrawerResizingBehavior resizingBehavior;
        [Export("resizingBehavior", ArgumentSemantic.Assign)]
        MSDrawerResizingBehavior ResizingBehavior { get; set; }

        // @property (nonatomic) CGSize preferredContentSize;
        [Export("preferredContentSize", ArgumentSemantic.Assign)]
        CGSize PreferredContentSize { get; set; }

        // @property (nonatomic, strong) MSPopupMenuItem * _Nullable headerItem;
        [NullAllowed, Export("headerItem", ArgumentSemantic.Strong)]
        MSPopupMenuItem HeaderItem { get; set; }

        // @property (copy, nonatomic) NSIndexPath * _Nullable selectedItemIndexPath;
        [NullAllowed, Export("selectedItemIndexPath", ArgumentSemantic.Copy)]
        NSIndexPath SelectedItemIndexPath { get; set; }

        // -(void)addItems:(NSArray<MSPopupMenuItem *> * _Nonnull)items;
        [Export("addItems:")]
        void AddItems(MSPopupMenuItem[] items);

        // -(void)addSection:(MSPopupMenuSection * _Nonnull)section;
        [Export("addSection:")]
        void AddSection(MSPopupMenuSection section);

        // -(void)addSections:(NSArray<MSPopupMenuSection *> * _Nonnull)sections;
        [Export("addSections:")]
        void AddSections(MSPopupMenuSection[] sections);

        // -(void)viewDidLoad;
        [Export("viewDidLoad")]
        void ViewDidLoad();

        // -(void)viewWillAppear:(BOOL)animated;
        [Export("viewWillAppear:")]
        void ViewWillAppear(bool animated);

        // -(void)viewWillLayoutSubviews;
        [Export("viewWillLayoutSubviews")]
        void ViewWillLayoutSubviews();

        // -(void)viewDidLayoutSubviews;
        [Export("viewDidLayoutSubviews")]
        void ViewDidLayoutSubviews();

        // -(instancetype _Nonnull)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection __attribute__((objc_designated_initializer));
        [Export("initWithSourceView:sourceRect:presentationOrigin:presentationDirection:")]
        [DesignatedInitializer]
        IntPtr Constructor(UIView sourceView, CGRect sourceRect, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);

        // -(instancetype _Nonnull)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSDrawerPresentationDirection)presentationDirection __attribute__((objc_designated_initializer));
        [Export("initWithBarButtonItem:presentationOrigin:presentationDirection:")]
        [DesignatedInitializer]
        IntPtr Constructor(UIBarButtonItem barButtonItem, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);
    }

    // @interface MSPopupMenuItem : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric15MSPopupMenuItem")]
    [DisableDefaultCtor]
    interface MSPopupMenuItem
    {
        // @property (readonly, nonatomic, strong) UIImage * _Nullable image;
        [NullAllowed, Export("image", ArgumentSemantic.Strong)]
        UIImage Image { get; }

        // @property (readonly, nonatomic, strong) UIImage * _Nullable selectedImage;
        [NullAllowed, Export("selectedImage", ArgumentSemantic.Strong)]
        UIImage SelectedImage { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull title;
        [Export("title")]
        string Title { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nullable subtitle;
        [NullAllowed, Export("subtitle")]
        string Subtitle { get; }

        // @property (nonatomic) BOOL isEnabled;
        [Export("isEnabled")]
        bool IsEnabled { get; set; }

        // @property (nonatomic) BOOL isSelected;
        [Export("isSelected")]
        bool IsSelected { get; set; }

        // @property (readonly, copy, nonatomic) void (^ _Nullable)(void) onSelected;
        [NullAllowed, Export("onSelected", ArgumentSemantic.Copy)]
        Action OnSelected { get; }

        // -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected onSelected:(void (^ _Nullable)(void))onSelected __attribute__((objc_designated_initializer));
        [Export("initWithImage:selectedImage:title:subtitle:isEnabled:isSelected:onSelected:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] UIImage image, [NullAllowed] UIImage selectedImage, string title, [NullAllowed] string subtitle, bool isEnabled, bool isSelected, [NullAllowed] Action onSelected);

        // -(instancetype _Nonnull)initWithImageName:(NSString * _Nonnull)imageName generateSelectedImage:(BOOL)generateSelectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected onSelected:(void (^ _Nullable)(void))onSelected;
        [Export("initWithImageName:generateSelectedImage:title:subtitle:isEnabled:isSelected:onSelected:")]
        IntPtr Constructor(string imageName, bool generateSelectedImage, string title, [NullAllowed] string subtitle, bool isEnabled, bool isSelected, [NullAllowed] Action onSelected);

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSPopupMenuItem New();
    }

    // @interface MSPopupMenuSection : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric18MSPopupMenuSection")]
    [DisableDefaultCtor]
    interface MSPopupMenuSection
    {
        // @property (readonly, copy, nonatomic) NSString * _Nullable title;
        [NullAllowed, Export("title")]
        string Title { get; }

        // @property (copy, nonatomic) NSArray<MSPopupMenuItem *> * _Nonnull items;
        [Export("items", ArgumentSemantic.Copy)]
        MSPopupMenuItem[] Items { get; set; }

        // -(instancetype _Nonnull)initWithTitle:(NSString * _Nullable)title items:(NSArray<MSPopupMenuItem *> * _Nonnull)items __attribute__((objc_designated_initializer));
        [Export("initWithTitle:items:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] string title, MSPopupMenuItem[] items);

        // +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
        [Static]
        [Export("new")]
        MSPopupMenuSection New();
    }

    // @interface MSResizingHandleView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric20MSResizingHandleView")]
    interface MSResizingHandleView
    {
        // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
        [Export("initWithFrame:")]
        [DesignatedInitializer]
        IntPtr Constructor(CGRect frame);

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();
    }

    // @interface MSSegmentedControl : UIControl
    [BaseType(typeof(UIControl), Name = "_TtC14OfficeUIFabric18MSSegmentedControl")]
    interface MSSegmentedControl
    {
        // @property (getter = isEnabled, nonatomic) BOOL enabled;
        [Export("enabled")]
        bool Enabled { [Bind("isEnabled")] get; set; }

        // @property (nonatomic) BOOL isAnimated;
        [Export("isAnimated")]
        bool IsAnimated { get; set; }

        // @property (readonly, nonatomic) NSInteger numberOfSegments;
        [Export("numberOfSegments")]
        nint NumberOfSegments { get; }

        // @property (nonatomic) NSInteger selectedSegmentIndex;
        [Export("selectedSegmentIndex")]
        nint SelectedSegmentIndex { get; set; }

        // -(instancetype _Nonnull)initWithItems:(NSArray<NSString *> * _Nonnull)items __attribute__((objc_designated_initializer));
        [Export("initWithItems:")]
        [DesignatedInitializer]
        IntPtr Constructor(string[] items);

        // -(void)insertSegmentWithTitle:(NSString * _Nonnull)title at:(NSInteger)index;
        [Export("insertSegmentWithTitle:at:")]
        void InsertSegmentWithTitle(string title, nint index);

        // -(void)removeSegmentAt:(NSInteger)index;
        [Export("removeSegmentAt:")]
        void RemoveSegmentAt(nint index);

        // -(void)selectSegmentAt:(NSInteger)index animated:(BOOL)animated;
        [Export("selectSegmentAt:animated:")]
        void SelectSegmentAt(nint index, bool animated);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);
    }

    // @interface MSSeparator : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric11MSSeparator")]
    interface MSSeparator
    {

        // @property (readonly, nonatomic) CGSize intrinsicContentSize;
        [Export("intrinsicContentSize")]
        CGSize IntrinsicContentSize { get; }

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);
    }

    // @interface MSTouchForwardingView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric21MSTouchForwardingView")]
    interface MSTouchForwardingView
    {
        // -(BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event __attribute__((warn_unused_result));
        [Export("pointInside:withEvent:")]
        bool PointInside(CGPoint point, [NullAllowed] UIEvent @event);

        // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
        [Export("initWithFrame:")]
        [DesignatedInitializer]
        IntPtr Constructor(CGRect frame);
    }

    // @interface MSTwoLinesTitleView : UIView
    [BaseType(typeof(UIView), Name = "_TtC14OfficeUIFabric19MSTwoLinesTitleView")]
    interface MSTwoLinesTitleView
    {
        // -(instancetype _Nonnull)initWithStyle:(enum MSTwoLinesTitleStyle)style;
        [Export("initWithStyle:")]
        IntPtr Constructor(MSTwoLinesTitleStyle style);

        // -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
        [Export("initWithFrame:")]
        [DesignatedInitializer]
        IntPtr Constructor(CGRect frame);

        // -(CGSize)sizeThatFits:(CGSize)size __attribute__((warn_unused_result));
        [Export("sizeThatFits:")]
        CGSize SizeThatFits(CGSize size);

        // -(void)layoutSubviews;
        [Export("layoutSubviews")]
        void LayoutSubviews();

        // @property (nonatomic) BOOL isAccessibilityElement;
        [Export("isAccessibilityElement")]
        bool IsAccessibilityElement { get; set; }

        // -(NSInteger)accessibilityElementCount __attribute__((warn_unused_result));
        [Export("accessibilityElementCount")]
        nint AccessibilityElementCount { get; }

        // -(id _Nullable)accessibilityElementAtIndex:(NSInteger)index __attribute__((warn_unused_result));
        [Export("accessibilityElementAtIndex:")]
        [return: NullAllowed]
        NSObject AccessibilityElementAtIndex(nint index);

        // -(NSInteger)indexOfAccessibilityElement:(id _Nonnull)element __attribute__((warn_unused_result));
        [Export("indexOfAccessibilityElement:")]
        nint IndexOfAccessibilityElement(NSObject element);
    }
    interface IMSTwoLinesTitleViewDelegate { }

    // @protocol MSTwoLinesTitleViewDelegate
    [Protocol(Name = "_TtP14OfficeUIFabric27MSTwoLinesTitleViewDelegate_"), Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MSTwoLinesTitleViewDelegate
    {
        // @required -(void)twoLinesTitleView:(MSTwoLinesTitleView * _Nonnull)twoLinesTitleView didTapOnTitle:(NSString * _Nonnull)title;
        [Abstract]
        [Export("twoLinesTitleView:didTapOnTitle:")]
        void DidTapOnTitle(MSTwoLinesTitleView twoLinesTitleView, string title);
    }

    // @interface OfficeUIFabricFramework : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC14OfficeUIFabric23OfficeUIFabricFramework")]
    interface OfficeUIFabricFramework
    {
    }

    // @interface OfficeUIFabric_Swift_1386 (UIImage)
    [Category]
    [BaseType(typeof(UIImage))]
    interface UIImage_OfficeUIFabric_Swift_1386
    {
        // +(UIImage * _Nullable)staticImageNamed:(NSString * _Nonnull)name in:(NSBundle * _Nullable)bundle withPrimaryColorForDarkerSystemColors:(UIColor * _Nullable)darkerPrimaryColor __attribute__((warn_unused_result));
        [Static]
        [Export("staticImageNamed:in:withPrimaryColorForDarkerSystemColors:")]
        [return: NullAllowed]
        UIImage StaticImageNamed(string name, [NullAllowed] NSBundle bundle, [NullAllowed] UIColor darkerPrimaryColor);
    }

    // @interface OfficeUIFabric_Swift_1396 (UINavigationBar)
    [Category]
    [BaseType(typeof(UINavigationBar))]
    interface UINavigationBar_OfficeUIFabric_Swift_1396
    {
        // -(void)hideBottomBorder;
        [Export("hideBottomBorder")]
        void HideBottomBorder();
    }

    // @interface OfficeUIFabric_Swift_1407 (UIViewController)
    [Category]
    [BaseType(typeof(UIViewController))]
    interface UIViewController_OfficeUIFabric_Swift_1407
    {
        // -(void)addChildController:(UIViewController * _Nonnull)childController;
        [Export("addChildController:")]
        void AddChildController(UIViewController childController);

        // -(void)removeChildController:(UIViewController * _Nonnull)childController;
        [Export("removeChildController:")]
        void RemoveChildController(UIViewController childController);
    }
}